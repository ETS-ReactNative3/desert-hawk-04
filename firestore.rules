// firebase deploy --only firestore:rules
// ref: https://firebase.google.com/docs/firestore/security/rules-structure
// rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // match /{document=**} {
    // // Allow read/write access to all users under any conditions
    // // Warning: **NEVER** use this rule set in production; it allows
    // // anyone to overwrite your entire database.
    //   allow read, write: if true;
    // }
  
    match /users/{userId} {
      // ref: https://firebase.google.com/docs/firestore/security/rules-conditions#authentication
      // Make sure the uid of the requesting user matches name of the user document.
      // The wildcard expression {userId} makes the userId variable available in rules.
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    match /settings/{userId} {
      allow create, read: if request.auth.uid == userId;
      allow update: if request.auth.uid != null;
    }

    match /leads/{lead} {
      // allow read, update, delete: if resource.data.createdBy == request.auth.uid;
      // allow create: if request.auth.uid != null;
      allow read, write: if request.auth.uid != null;
    }

    match /contacts/{contact} {
      allow read, update, delete: if resource.data.createdBy == request.auth.uid;
      allow create: if request.auth.uid != null;
    }

    match /ratings/{rating} {
      // allow read, update, delete: if resource.data.createdBy == request.auth.uid;
      // allow create: if request.auth.uid != null;
      // allow read, write: if request.auth.uid != null;
      allow read, update, delete: if request.auth.uid == resource.data.createdBy;
      allow create: if request.auth.uid != null;
    }

    match /narratives/{narrative} {
      // allow read, update, delete: if resource.data.createdBy == request.auth.uid;
      // allow create: if request.auth.uid != null;
      // allow read, write: if request.auth.uid != null;
      allow read, update, delete: if request.auth.uid == resource.data.createdBy;
      allow create: if request.auth.uid != null;
    }

    // match /stats {
    //   allow read, write: if request.auth.uid != null;
    // }

    match /stats/level_1 {
      allow create, read, update: if request.auth.uid != null;
    }

    match /stats/level_2 {
      allow create, update: if request.auth.uid != null;
    }

    match /stats/level_3 {
      allow create, update: if request.auth.uid != null;
    }

  }
}

// leads: read, write: if logged in && not archivedBy anyone else && lead.geo === user.geo
// leads: archive: read: if lead.archivedBy === user.uid
